/*
    Copyright Kristjan Kongas 2020

    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

// See https://github.com/kongaskristjan/fire-hpp for library's documentation and updates


#include <algorithm>
#include <cassert>
#include <cstddef>
#include <cstdlib>
#include <iostream>
#include <limits>
#include <map>
#include <string>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <cmath>
#include <cuda_runtime.h>

#include "../../include/BSim.h"
#include "../../src/utils/random.h"
#include "../../src/utils/timer.h"

#include <memory>
#include <sstream>
class parser
{
private:
    std::unordered_map<std::string,std::string> params;
public:
    //突触数量
    static std::string NSYN;
    //划分区域数量
    static std::string NPART;
    //划分方式
    static std::string MODEL;
    //输出文件名
    static std::string FILE;
    //输出文件路径
    static std::string PREFIX;
    static std::string NET;
    static std::string RATE;
    parser(int args,char* argv[]){
        //默认突触数量:10000
        params[NSYN]="10000";
        //默认划分区域:1
        params[NPART]="1";
        //默认划分方式:metis
        params[MODEL]="metis";
        //默认输出文件
        params[FILE]="tmp.txt";
        //默认输出文件路径
        params[PREFIX]="../../benchdata/";
        params[NET]="brunel";
        params[RATE]="0.005";
        //获取输入参数
        for(int i=1;i<args;i++){
            char* arg=argv[i];
            std::string name;
            std::string value;
            bool first=true;
            for(int j=0;arg[j]!='\0';j++){
                if(arg[j]=='='){first=false;continue;}
                if(first)name.push_back(arg[j]);
                else value.push_back(arg[j]);
            }
            params[name]=value;
        }
    }
    ~parser(){}
    std::string getStr(std::string name){
        if(!params.count(name))return "";
        return params[name];
    }
    size_t getNum(std::string name){
        if(!params.count(name))return -1;
        std::stringstream ss(params[name]);
        size_t res;
        ss>>res;
        return res;
    }
    float getFloat(std::string name){
        if(!params.count(name))return -1;
        std::stringstream ss(params[name]);
        float res;
        ss>>res;
        return res;
    }
    bool getBool(std::string name){
        if(!params.count(name))return false;
        return (params[name]=="y");
    }
};
std::string parser::NSYN="--nsyn";
std::string parser::NPART="--npart";
std::string parser::MODEL="--model";
std::string parser::FILE="--file";
std::string parser::PREFIX="--prefix";
std::string parser::NET="--net";
std::string parser::RATE="--rate";

using namespace std;
using namespace spice::util;


static ulong_ seed = 1337;


void connect(Network & net,
             int const src_pop,
			 int const dst_pop,
			 int const src_sz,
			 int const dst_sz,
			 float const p,
			 float const w,
			 float const d)
{
	xoroshiro128p gen(seed++);
	std::vector<float> neighbors(dst_sz);

	for (int src = 0; src < src_sz; src++)
	{
		int const degree = binornd(gen, dst_sz, p);
		
		float total = exprnd(gen);
		for (int i = 0; i < degree; i++)
		{
			neighbors[i] = total;
			total += exprnd(gen);
		}

		float const scale = (dst_sz - degree) / total;
		for (int i = 0; i < degree; i++)
			net.connect(src_pop, src, dst_pop, static_cast<int>(neighbors[i] * scale) + i, w, d);
	}
}

void make_brunel(Network & c, int const n,float rate)
{
	auto P = c.createPopulation(n*5/10, CompositeNeuron<PoissonNeuron, StaticSynapse>(PoissonNeuron(rate, 0), 1, 1));
	auto E = c.createPopulation(n*4/10, CompositeNeuron<LIFEBNeuron, StaticSynapse>(LIFEBNeuron(0, 0, 0, 0, 0, 0.002f, 0, 0, 0.02f, 0), 1, 1));
	auto I = c.createPopulation(n*1/10, CompositeNeuron<LIFEBNeuron, StaticSynapse>(LIFEBNeuron(0, 0, 0, 0, 0, 0.002f, 0, 0, 0.02f, 0), 1, 1));

	float const Wex =  0.0001 * 20000 / n;
	float const Win = -0.0005 * 20000 / n;
	float const delay= 0.0016f;
	connect(c, 0, 1, P->getNum(), E->getNum(), 0.1f, Wex, delay); // P->E
	connect(c, 0, 2, P->getNum(), I->getNum(), 0.1f, Wex, delay); // P->I

	connect(c, 1, 1, E->getNum(), E->getNum(), 0.1f, Wex, delay); // E->E
	connect(c, 1, 2, E->getNum(), I->getNum(), 0.1f, Wex, delay); // E->I

	connect(c, 2, 1, I->getNum(), E->getNum(), 0.1f, Win, delay); // I->E
	connect(c, 2, 2, I->getNum(), I->getNum(), 0.1f, Win, delay); // I->I
}

void make_vogels(Network & c, int const n)
{
	auto E = c.createPopulation(n*8/10, CompositeNeuron<LIFEBNeuron, StaticSynapse>(LIFEBNeuron(-0.06f, -0.06f, -0.06f, 0, 0, 0.005f, 0, 0, -0.02f, 0), 1, 1));
	auto I = c.createPopulation(n*2/10, CompositeNeuron<LIFEBNeuron, StaticSynapse>(LIFEBNeuron(-0.06f, -0.06f, -0.06f, 0, 0, 0.005f, 0, 0, -0.02f, 0), 1, 1));

	float const Wex = 0.4 * 16000000 / n / n;
	float const Win = -5.1 * 16000000 / n / n;

	

	connect(c, 0, 0, E->getNum(), E->getNum(), 0.02f, Wex, 0.0008f); // E->E
	connect(c, 0, 1, E->getNum(), I->getNum(), 0.02f, Wex, 0.0008f); // E->I

	connect(c, 1, 0, I->getNum(), E->getNum(), 0.02f, Win, 0.0008f); // I->E
	connect(c, 1, 1, I->getNum(), I->getNum(), 0.02f, Win, 0.0008f); // I->I
}

void make_synth(Network & c, int const n, float const p_fire, float const p_connect, int const delay)
{
	auto P = c.createPopulation(n, CompositeNeuron<PoissonNeuron, StaticSynapse>(PoissonNeuron(p_fire, 0), 1, 1));
	connect(c, 0, 0, P->getNum(), P->getNum(), p_connect, 1, delay * 0.0001); // E->E
}

int main(int argc,char* argv[]){
	parser par(argc,argv);
	srand(time(0));
	std::cout<<"==========="<<std::endl;
    std::cout<<"model:"<<par.getStr(parser::NET)<<std::endl;
	int nsyn=par.getNum(parser::NSYN);
    std::cout<<"nsyn:"<<nsyn<<std::endl;
    int npart=par.getNum(parser::NPART);
    std::cout<<"npart:"<<npart<<std::endl;
    int N=10;
    Network c;
    timer build;
    if(par.getStr(parser::NET)=="brunel"){
        N=static_cast<int>(std::sqrt((float)nsyn/(0.1*0.5)));
        float rate=par.getFloat(parser::RATE);
        std::cout<<"rate:"<<rate<<std::endl;
        make_brunel(c,N,rate);
        
    }else{
        N=static_cast<int>(std::sqrt((float)nsyn/(0.02)));
        make_vogels(c,N);
    }
	std::cout<<"build time:"<<build.stop()<<" s"<<std::endl;
	MGSim sim(&c,0.0001,npart);
	sim.run(1);
	std::cout<<"end"<<std::endl;
    std::cout<<"==========="<<std::endl;
	return 0;
}
